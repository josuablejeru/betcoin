openapi: 3.0.0
info:
  title: betcoin
  description: betcoin app
  termsOfService: 'dd'
  contact:
    name: Josua Blejeru
    url: https://github.com/josuablejeru
    email: josua.blejeru@gmail.com
  license:
    name: MIT
    url: https://choosealicense.com/licenses/mit/
  version: 1.0.0

servers:
- url: "https://api.betcoin-app.xyz/{basePath}"
  variables:
    basePath:
      default: "dev"

security:
  - sessionCookie: []

paths:
  /session:
    get:
      tags:
        - CORS
      summary: Game Session
      description: |
        Create a new Game session for the user and returns the session cookie
      responses:
        "201":
          description: The sessionId is returned. This UUID is required for all game related endpoints
          headers:
            Set-Cookie:
              schema: 
                type: string
                example: SESSION_ID=abcde12345; Path=/; SameSite=Lax 
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
             application/json:
              schema:
                $ref: '#/components/schemas/UserSessionResponse'
              examples:
                UserSession:
                  value:
                    sessionId: "a70704d3-734b-4a3c-8cd7-cc5472eb35dc"

      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${region}:${account_id}:function:${create_session_function}/invocations
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
             
  /guess:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers in API Gateway
      tags:
        - CORS
      responses:
        "200":
          description: New guess is created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}

    post:
      summary: Stores a new guess
      operationId: storeGuess
      tags:
        - CORS
      requestBody:
        description: new guess to be stored
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGuessRequest'
            examples:
              NewGuessRequest:
                value:
                  userId: 'foo'
                  point: -1
                  guess: "DOWN"

      responses:
        "200":
          description: new guess was sucessfull stored
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuessResponse'

        "400":
          description: Missing field

      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${region}:${account_id}:function:${store_guess_function}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /score/{sessionId}:
    get:
      tags:
        - CORS
      description: Get the current score of the user
      parameters:
        - in: path
          name: sessionId
          schema:
            type: string
          required: true
          description: UUID of the user

      responses:
        "200":
          description: Returns the current score of the user
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/UserScoreResponse'

      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${region}:${account_id}:function:${get_score_function}/invocations
        responses:
         default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

components:
  schemas:

    UserSessionResponse:
      type: object
      required:
        - sessionId
      properties:
        sessionId:
          type: string

    NewGuessRequest:
      type: object
      required:
        - sessionId 
        - point
        - guess
      properties:
        sessionId:
          type: string
        point:
          type: integer
          format: int64
        guess:
          type: string
          enum: 
            - "UP"
            - "DOWN"

    GuessResponse:
      type: object
      required:
        - guessId
        - score
      properties:
        sessionId:
          type: string
        score:
          type: integer

    UserScoreRequest:
      type: object
      required:
        - sessionId
      properties:
        sessionId:
          type: string

    UserScoreResponse:
      type: object
      properties:
        score:
          type: integer